using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using JLT.SEG.Entidades;
using JLT.SEG.Helper;
using System.Web.Configuration;
using JLT.SEG.Negocio;
using JLT.SEG.WEB.Util;
namespace JLT.SEG.WEB.Permisos
{
    public partial class frmPermisoEmpresaBuscar : PaginaBase
    {
        private const string ID_FORMULARIO = "frmPermisoEmpresaBuscar";

        protected new void Page_Load(object sender, EventArgs e)
        {
            try
            {
                if (!IsPostBack)
                {
                    BEUsuario Usuario = Session[Constantes.SESION_USUARIO] as BEUsuario;
                    txtNombre.Text = Usuario.Nombres + " " + Usuario.ApellidoPaterno + " " + Usuario.ApellidoMaterno;
                    txtCodigo.Text = Usuario.CodigoUsuario;
                    //Cargamos los datos de los controles de la pantalla
                    CargarDatosControles();

                    CargarTreeView(Usuario);
                }
                CargarPermisosObjetosFormulario(ID_FORMULARIO);
            }
            catch (Exception ex)
            {
                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_GENERAL]);
                NetLogger.WriteLog(ELogLevel.ERROR, ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        private void CargarTreeView(BEUsuario Usuario)
        {
            tvAplicacionesUsuario.Nodes.Clear();

            List<BEAplicacion> listaAplicaciones = new BLAplicacion().ListarAplicacionPorUsuario(Usuario.IdUsuario);
            List<BETipoEmpresa> listaTipoEmpresas = new BLTipoEmpresa().ListarTipoEmpresaPorUsuario(Usuario.IdUsuario);
            List<BEEmpresa> listaEmpresa = new BLEmpresa().ListarEmpresaxUsuario(Usuario,0);
            TreeNode nodo = null;
            TreeNode nodoHijo = null;
            TreeNode nodoSubHijo = null;
            foreach (BEAplicacion aplicacion in listaAplicaciones)
            {
              
                List<BETipoEmpresa> listaTipoEmpresaAplicacion = listaTipoEmpresas.FindAll(
                delegate(BETipoEmpresa bk)
                {
                    return bk.BEAplicacion.IdAplicacion.Equals(aplicacion.IdAplicacion);
                }
                );

                if (listaTipoEmpresaAplicacion.Count > 0) 
                {
                    nodo = new TreeNode();
                    nodo.Value = aplicacion.IdAplicacion.ToString();
                    nodo.Text = aplicacion.NombreCortoAplicacion;
                    nodo.NavigateUrl = string.Format("{0}?idAplicacion=" + aplicacion.IdAplicacion.ToString() + "&idUsuario=" + Usuario.IdUsuario, WebConfigurationManager.AppSettings[Constantes.DIRECCION_FRM_PERMISO_EMPRESA_DETALLE]);
                    tvAplicacionesUsuario.Nodes.Add(nodo);

                    foreach (BETipoEmpresa oBETipoEmpresa in listaTipoEmpresaAplicacion)
                    {
                        nodoHijo = new TreeNode();
                        nodoHijo.Value = oBETipoEmpresa.IdTipoEmpresa.ToString();
                        nodoHijo.Text = oBETipoEmpresa.NomTipoEmpresa;
                        nodoHijo.SelectAction = TreeNodeSelectAction.None;
                        nodo.ChildNodes.Add(nodoHijo);

                        List<BEEmpresa> listaEmpresaAplicacion = listaEmpresa.FindAll(
                        delegate(BEEmpresa bk)
                        {
                            return bk.BETipoEmpresa.IdTipoEmpresa.Equals(oBETipoEmpresa.IdTipoEmpresa) && bk.BETipoEmpresa.BEAplicacion.IdAplicacion.Equals(aplicacion.IdAplicacion);
                        }
                        );

                        foreach (BEEmpresa oBEEmpresa in listaEmpresaAplicacion)
                        {
                            nodoSubHijo = new TreeNode();
                            nodoSubHijo.Value = oBEEmpresa.IdEmpresa.ToString();
                            nodoSubHijo.Text = oBEEmpresa.NomEmpresa;
                            nodoSubHijo.SelectAction = TreeNodeSelectAction.None;
                            nodoHijo.ChildNodes.Add(nodoSubHijo);
                        
                        }
                    }
                }
            }
            tvAplicacionesUsuario.ExpandAll();
        }

        private void CargarDatosControles()
        {
            List<BEAplicacion> listaAplicacion = new List<BEAplicacion>();
            BEAplicacion beAplicacion = new BEAplicacion();
            beAplicacion.NombreLargoAplicacion = "none";
            beAplicacion.DescripcionAplicacion = "none";

            listaAplicacion.Add(beAplicacion);

            dgvAplicaciones.DataSource = listaAplicacion;
            dgvAplicaciones.DataBind();
            dgvAplicaciones.Rows[0].Visible = false;
        }

        protected void btnLimpiar_Click(object sender, EventArgs e)
        {
            try
            {
                Response.Redirect(WebConfigurationManager.AppSettings[Constantes.DIRECCION_FRM_USUARIO_BUSCAR], false);
            }
            catch (Exception ex)
            {
                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_GENERAL]);
                NetLogger.WriteLog(ELogLevel.ERROR, ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }


        protected void btnAplicativoBuscar_Click(object sender, EventArgs e)
        {
            try
            {
                string mensaje;
                string nombreAplicacion = txtAplicativo.Text.Trim();
                BEUsuario Usuario = Session[Constantes.SESION_USUARIO] as BEUsuario;
                BLAplicacion blAplicacion = new BLAplicacion();
                List<BEAplicacion> listaAplicaciones = blAplicacion.ListarAplicacionPorNombreYUsuario(nombreAplicacion, Usuario.IdUsuario);

                if (listaAplicaciones.Count > 0)
                {
                    mensaje = WebConfigurationManager.AppSettings[Constantes.TITULO_RESULTADO_BUSQUEDA] + listaAplicaciones.Count;
                }
                else
                {
                    mensaje = WebConfigurationManager.AppSettings[Constantes.TITULO_RESULTADO_BUSQUEDA_CERO];
                }
                MostrarMensajeResultados(mensaje);
                dgvAplicaciones.DataSource = listaAplicaciones;
                dgvAplicaciones.DataBind();

            }
            catch (Exception ex)
            {
                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_GENERAL]);
                NetLogger.WriteLog(ELogLevel.ERROR, ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        protected void dgvAplicaciones_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            try
            {
                BEUsuario Usuario = Session[Constantes.SESION_USUARIO] as BEUsuario;

                int idAplicacion = Convert.ToInt32(e.CommandArgument);

                if (e.CommandName == Constantes.COMANDO_AGREGAR_ROL)
                {
                    Response.Redirect(string.Format("{0}?idAplicacion=" + idAplicacion + "&idUsuario=" + Usuario.IdUsuario, WebConfigurationManager.AppSettings[Constantes.DIRECCION_FRM_PERMISO_EMPRESA_DETALLE]), false);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_GENERAL]);
                NetLogger.WriteLog(ELogLevel.ERROR, ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        private void MostrarMensajeResultados(String Mensaje)
        {
            lbResultados.CssClass = this.lbResultados.CssClass + " displayShow";
            lbResultados.Text = Mensaje;
            lbResultados.Visible = true;
        }

        
    }
}