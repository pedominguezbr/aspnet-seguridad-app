using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using JLT.SEG.WEB.Util;
using JLT.SEG.Helper;
using System.Web.Configuration;
using JLT.SEG.Negocio;
using JLT.SEG.Entidades;

namespace JLT.SEG.WEB.Permisos
{
    public partial class frmPermisoObjetoBuscar : PaginaBase
    {

        private const string ID_FORMULARIO = "frmPermisoObjetoBuscar";

        protected new void Page_Load(object sender, EventArgs e)
        {
            try
            {
                if (!IsPostBack)
                {
                    CargarDatosIniciales();
                }
                CargarPermisosObjetosFormulario(ID_FORMULARIO);
            }
            catch (Exception ex)
            {
                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_GENERAL]);
                NetLogger.WriteLog(ELogLevel.ERROR, ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        private void CargarDatosIniciales()
        {
            BLAplicacion blAplicacion = new BLAplicacion();
            Formularios.CargarDropDownList(ddlAplicativo,
                                           blAplicacion.ListarAplicacion(),
                                           Constantes.TEXTO_DDL_APLICATIVO,
                                           Constantes.VALUE_DDL_APLICATIVO,
                                           Constantes.DEFAULT_DDL_APLICATIVO);
            BLRol blRol = new BLRol();
            Formularios.CargarDropDownList(ddlRol,
                                           new List<BERol>(),
                                           Constantes.TEXTO_DDL_ROL,
                                           Constantes.VALUE_DDL_ROL,
                                           Constantes.DEFAULT_DDL_ROL);

            btnEliminar.Attributes.Add("onclick", "return confirmarEliminacionPermisoObjeto("+tvPermisosObjeto.ClientID+"_Data, '"+tvPermisosObjeto.ClientID+"');");
        }

        protected void btnBuscar_Click(object sender, EventArgs e)
        {
            try
            {
                CargarTreeView();
            }
            catch (Exception ex)
            {
                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_GENERAL]);
                NetLogger.WriteLog(ELogLevel.ERROR, ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        protected void btnNuevo_Click(object sender, EventArgs e)
        {
            try
            {
                Response.Redirect(WebConfigurationManager.AppSettings[Constantes.DIRECCION_FRM_PERMISO_OBJETO_DETALLE],false);
            }
            catch (Exception ex)
            {
                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_GENERAL]);
                NetLogger.WriteLog(ELogLevel.ERROR, ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        protected void btnEliminar_Click(object sender, EventArgs e)
        {
            try
            {
                if (tvPermisosObjeto.SelectedNode != null)
                {
                    if (tvPermisosObjeto.SelectedNode.Parent != null)
                    {
                        if (tvPermisosObjeto.SelectedValue != String.Empty)
                        {
                            int idPermisoObjeto = Convert.ToInt32(tvPermisosObjeto.SelectedValue);
                            BLPermisoObjeto blPermisoObjeto = new BLPermisoObjeto();

                            bool eliminacionExitosa = blPermisoObjeto.EliminarPermisoObjeto(idPermisoObjeto);
                            if (eliminacionExitosa)
                            {
                                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_PERMISO_OBJETO_ELIMINADO_EXITOSAMENTE]);
                                CargarTreeView();
                            }
                            else
                            {
                                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_PERMISO_OBJETO_NO_SE_PUEDE_ELIMINAR_POR_PERMISOS_HIJOS]);
                            }
                        }
                        else
                        {
                            MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_OBJETO_DEBE_SELECCIONAR_UN_OBJETO]);
                        }
                    }
                    else
                    {
                        MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_OBJETO_DEBE_SELECCIONAR_UN_OBJETO]);
                    }
                }
                else
                {
                    MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_OBJETO_DEBE_SELECCIONAR_UN_OBJETO]);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_GENERAL]);
                NetLogger.WriteLog(ELogLevel.ERROR, ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        protected void btnlimpiar_Click(object sender, EventArgs e)
        {
            try
            {
                ddlAplicativo.SelectedIndex = 0;

                Formularios.CargarDropDownList(ddlRol,
                               new List<BERol>(),
                               Constantes.TEXTO_DDL_ROL,
                               Constantes.VALUE_DDL_ROL,
                               Constantes.DEFAULT_DDL_ROL);
                tvPermisosObjeto.Nodes.Clear();
            }
            catch (Exception ex)
            {
                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_GENERAL]);
                NetLogger.WriteLog(ELogLevel.ERROR, ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        protected void ddlAplicativo_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                BLRol blRol = new BLRol();
                Formularios.CargarDropDownList(ddlRol,
                                               blRol.ListarRolesPorAplicacion(Convert.ToInt16(ddlAplicativo.SelectedValue)),
                                           Constantes.TEXTO_DDL_ROL,
                                           Constantes.VALUE_DDL_ROL,
                                           Constantes.DEFAULT_DDL_ROL);
            }
            catch (Exception ex)
            {
                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_GENERAL]);
                NetLogger.WriteLog(ELogLevel.ERROR, ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        private void CargarTreeView()
        {            
            tvPermisosObjeto.Nodes.Clear();
            List<BEAplicacion> listaAplicaciones = new BLAplicacion().ListarAplicacionPorIdAplicacion(Convert.ToInt16(ddlAplicativo.SelectedValue));
            int idAplicacion = -1;
            if (ddlAplicativo.SelectedIndex > 0)
            {
                idAplicacion = Convert.ToInt16(ddlAplicativo.SelectedValue);
            }
            int idRol = -1;
            if (ddlRol.SelectedIndex > 0)
            {
                idRol = Convert.ToInt16(ddlRol.SelectedValue);
            }
            BEBusquedaPermisoObjeto beBusquedaPermisoObjeto = new BEBusquedaPermisoObjeto();
            beBusquedaPermisoObjeto.IdAplicacion = idAplicacion;
            beBusquedaPermisoObjeto.IdRol = idRol;

            List<BEObjeto> listaObjetos = new BLPermisoObjeto().ListarPermisoObjeto(beBusquedaPermisoObjeto);

            TreeNode nodo = null;
            TreeNode nodoHijo = null;
            foreach (BEAplicacion aplicacion in listaAplicaciones)
            {
                nodo = new TreeNode();
                nodo.Value = aplicacion.IdAplicacion.ToString();
                nodo.Text = aplicacion.NombreCortoAplicacion;
                nodo.SelectAction = TreeNodeSelectAction.SelectExpand;
                nodo.ImageUrl = WebConfigurationManager.AppSettings[Constantes.RECURSO_RUTA_APLICACION]; 
                tvPermisosObjeto.Nodes.Add(nodo);

                List<BEObjeto> listaObjetosPadresAplicacion = listaObjetos.FindAll(
                delegate(BEObjeto bk)
                {
                    return bk.Aplicacion.IdAplicacion.Equals(aplicacion.IdAplicacion) && bk.IdObjetoPadre == -1;
                }
                );

                foreach (BEObjeto objeto in listaObjetosPadresAplicacion)
                {
                    nodoHijo = new TreeNode();
                    nodoHijo.Value = objeto.IdPermisoObjeto.ToString();
                    nodoHijo.Text = objeto.EtiquetaObjeto + " (" + objeto.NombreFisicoObjeto + ")";
                    nodoHijo.SelectAction = TreeNodeSelectAction.SelectExpand;
                    nodoHijo.ImageUrl = ObtenerIconoNodo(objeto);
                    nodo.ChildNodes.Add(nodoHijo);

                    CargarTreeViewObjetosHijos(listaObjetos, nodoHijo, objeto.IdObjeto);
                }
            }

            tvPermisosObjeto.CollapseAll();            
            tvPermisosObjeto.Attributes["onexpand"] = "";
        }

        private void CargarTreeViewObjetosHijos(List<BEObjeto> listaObjetos, TreeNode nodo, int idObjeto)
        {
            TreeNode nodoHijo = null;
            List<BEObjeto> listaObjetosHijos = listaObjetos.FindAll(
            delegate(BEObjeto bk)
            {
                return bk.IdObjetoPadre == idObjeto;
            }
            );

            foreach (BEObjeto objetoHijo in listaObjetosHijos)
            {
                nodoHijo = new TreeNode();
                nodoHijo.Value = objetoHijo.IdPermisoObjeto.ToString();
                nodoHijo.Text = objetoHijo.EtiquetaObjeto + " (" + objetoHijo.NombreFisicoObjeto + ")";
                nodoHijo.SelectAction = TreeNodeSelectAction.SelectExpand;
                nodoHijo.ImageUrl = ObtenerIconoNodo(objetoHijo);
                nodo.ChildNodes.Add(nodoHijo);

                CargarTreeViewObjetosHijos(listaObjetos, nodoHijo, objetoHijo.IdObjeto);
            }

        }

        private string ObtenerIconoNodo(BEObjeto objeto)
        {
            string urlImagen = "";

            switch (objeto.TipoObjeto.IdTipoObjeto)
            {
                case Constantes.CODIGO_TIPO_OBJETO_BOTON://boton
                    urlImagen = WebConfigurationManager.AppSettings[Constantes.RECURSO_RUTA_BOTON];
                    break;
                case Constantes.CODIGO_TIPO_OBJETO_CAJA_TEXTO://textbox
                    urlImagen = WebConfigurationManager.AppSettings[Constantes.RECURSO_RUTA_TEXTBOX];
                    break;
                case Constantes.CODIGO_TIPO_OBJETO_CHECK_BOX://checkbox
                    urlImagen = WebConfigurationManager.AppSettings[Constantes.RECURSO_RUTA_CHECKBOX];
                    break;
                case Constantes.CODIGO_TIPO_OBJETO_FORMULARIO://formulario
                    urlImagen = WebConfigurationManager.AppSettings[Constantes.RECURSO_RUTA_FORMULARIO];
                    break;
                case Constantes.CODIGO_TIPO_OBJETO_LISTA_DESPLEGABLE://dropdownlist
                    urlImagen = WebConfigurationManager.AppSettings[Constantes.RECURSO_RUTA_COMBO];
                    break;
                case Constantes.CODIGO_TIPO_OBJETO_OPCION_MENU://menu
                    urlImagen = WebConfigurationManager.AppSettings[Constantes.RECURSO_RUTA_MENU];
                    break;
                case Constantes.CODIGO_TIPO_OBJETO_RADIO://radio
                    urlImagen = WebConfigurationManager.AppSettings[Constantes.RECURSO_RUTA_RADIO];
                    break;
            }
           
            return urlImagen;
        }

        override protected void OnInit(EventArgs e)
        {
            this.Load += new System.EventHandler(this.Page_Load);
        }
    }
}
