using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using JLT.SEG.Helper;
using System.Web.Configuration;
using JLT.SEG.Negocio;
using JLT.SEG.Entidades;
using System.Data;
using System.Data.Sql;
using System.Data.SqlClient;
using System.Configuration;
using JLT.SEG.WEB.Util;

namespace JLT.SEG.WEB.Objetos
{
    public partial class frmObjetoBuscar : PaginaBase
    {
        private const string ID_OBJETO = "idObjeto";
        private const string ID_FORMULARIO = "frmObjetoBuscar";

        protected new void Page_Load(object sender, EventArgs e)
        {
            try
            {
                if (!IsPostBack)
                {
                    CargarDatosControles();
                }
                CargarPermisosObjetosFormulario(ID_FORMULARIO);
            }
            catch (Exception ex)
            {
                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_GENERAL]);
                NetLogger.WriteLog(ELogLevel.ERROR, ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        public void ExpandirNodo(TreeNode nodo)
        {
            nodo.Select();
            nodo.Expand();

            if (nodo.Parent != null)
            {
                ExpandirNodoPadre(nodo.Parent);
            }
        }

        public void ExpandirNodoPadre(TreeNode nodo)
        {
            nodo.Expand();

            if (nodo.Parent != null)
            {
                ExpandirNodoPadre(nodo.Parent);
            }
        }

        private void CargarTreeView()
        {
            bool nodoSeleccionado = false;
            tvObjetos.Nodes.Clear();
            List<BEAplicacion> listaAplicaciones = new BLAplicacion().ListarAplicacionPorIdAplicacion(Convert.ToInt16(ddlAplicativo.SelectedValue));
            int idAplicacion = -1;
            if (ddlAplicativo.SelectedIndex > 0)
            {
                idAplicacion = Convert.ToInt16(ddlAplicativo.SelectedValue);
            }
            BEBusquedaObjeto beBusquedaObjeto = new BEBusquedaObjeto();
            beBusquedaObjeto.IdAplicacion = idAplicacion;
            beBusquedaObjeto.EtiquetaObjeto = "";// txtCodigoObjeto.Text.Trim();

            List<BEObjeto> listaObjetos = new BLObjeto().ListarObjetoPorAplicacionEtiquetaObjeto(beBusquedaObjeto);

            TreeNode nodo = null;
            TreeNode nodoHijo = null;
            foreach (BEAplicacion aplicacion in listaAplicaciones)
            {
                nodo = new TreeNode();
                nodo.Value = aplicacion.IdAplicacion.ToString();
                nodo.Text = aplicacion.NombreCortoAplicacion;
                nodo.SelectAction = TreeNodeSelectAction.SelectExpand;
                nodo.ImageUrl = WebConfigurationManager.AppSettings[Constantes.RECURSO_RUTA_APLICACION];

                tvObjetos.Nodes.Add(nodo);

                List<BEObjeto> listaObjetosPadresAplicacion = listaObjetos.FindAll(
                delegate(BEObjeto bk)
                {
                    return bk.Aplicacion.IdAplicacion.Equals(aplicacion.IdAplicacion) && bk.IdObjetoPadre == -1;
                }
                );

                foreach (BEObjeto objeto in listaObjetosPadresAplicacion)
                {
                    nodoHijo = new TreeNode();
                    nodoHijo.Value = objeto.IdObjeto.ToString();
                    nodoHijo.Text = objeto.EtiquetaObjeto + " (" + objeto.NombreFisicoObjeto + ")";
                    nodoHijo.SelectAction = TreeNodeSelectAction.SelectExpand;
                    nodoHijo.ImageUrl = ObtenerIconoNodo(objeto);
                    nodo.ChildNodes.Add(nodoHijo);

                    if (!txtCodigoObjeto.Text.Trim().Equals(""))
                    {
                        if (!nodoSeleccionado && objeto.NombreFisicoObjeto.Equals(txtCodigoObjeto.Text.Trim()))
                        {
                            ExpandirNodo(nodoHijo);
                            nodoSeleccionado = true;
                        }
                    }
                    CargarTreeViewObjetosHijos(listaObjetos, nodoHijo, ref nodoSeleccionado);
                }
            }
            if (!nodoSeleccionado)
            {
                tvObjetos.CollapseAll();
            }
            tvObjetos.Attributes["onexpand"] = "";
        }

        private void CargarTreeViewObjetosHijos(List<BEObjeto> listaObjetos, TreeNode nodo, ref bool nodoSeleccionado)
        {
            TreeNode nodoHijo = null;
            List<BEObjeto> listaObjetosHijos = listaObjetos.FindAll(
            delegate(BEObjeto bk)
            {
                return bk.IdObjetoPadre == Convert.ToInt16(nodo.Value);
            }
            );

            foreach (BEObjeto objetoHijo in listaObjetosHijos)
            {
                nodoHijo = new TreeNode();
                nodoHijo.Value = objetoHijo.IdObjeto.ToString();
                nodoHijo.Text = objetoHijo.EtiquetaObjeto + " (" + objetoHijo.NombreFisicoObjeto + ")";
                nodoHijo.SelectAction = TreeNodeSelectAction.SelectExpand;
                nodoHijo.ImageUrl = ObtenerIconoNodo(objetoHijo);
                nodo.ChildNodes.Add(nodoHijo);

                if (!txtCodigoObjeto.Text.Trim().Equals(""))
                {
                    if (!nodoSeleccionado && objetoHijo.NombreFisicoObjeto.Equals(txtCodigoObjeto.Text.Trim()))
                    {
                        ExpandirNodo(nodoHijo);
                        nodoSeleccionado = true;
                    }
                }

                CargarTreeViewObjetosHijos(listaObjetos, nodoHijo, ref nodoSeleccionado);
            }

        }

        protected void btnBuscar_Click(object sender, EventArgs e)
        {
            try
            {

                CargarTreeView();
                /*
                tvObjetos.Nodes.Clear();
                PopulateRootLevel(); 
                */
            }
            catch (Exception ex)
            {
                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_GENERAL]);
                NetLogger.WriteLog(ELogLevel.ERROR, ex.Message + Environment.NewLine + ex.StackTrace);
            }

        }
        private void MostrarMensajeResultados(String Mensaje)
        {
            lbResultados.Text = Mensaje;
            lbResultados.Visible = true;
            lbResultados.DataBind();
        }

        /*
        private void BuscarObjetosDataBind()
        {
            //throw new NotImplementedException();
            
            BLObjeto blObjeto = new BLObjeto();
            List<BEObjeto> listaObjeto = blObjeto.ListarObjeto(null);

            if (listaObjeto.Count <= 0)
            {
                //restaura el estado de los controles
                btnEditar.Visible = false;
                btnEliminar.Visible = false;
                tvObjetos.Visible = true;
            }
        }
        */
        protected void btnNuevo_Click(object sender, EventArgs e)
        {
            try
            {
                int idObjetoPadre = -1;
                int idAplicacionSeleccionada = -1;
                if (tvObjetos.SelectedNode != null)
                {
                    if (tvObjetos.SelectedNode.Parent == null)//es una aplicacion
                    {
                        idAplicacionSeleccionada = Convert.ToInt16(tvObjetos.SelectedValue);
                    }
                    else
                    {
                        if (tvObjetos.SelectedValue != string.Empty)
                        {
                            idObjetoPadre = Convert.ToInt16(tvObjetos.SelectedValue);
                        }
                    }
                }

                //Redireccionamos a la pantalla de Detalle de Onjetos
                Response.Redirect(WebConfigurationManager.AppSettings[Constantes.DIRECCION_FRM_OBJETO_DETALLE] + "?idAplicacionSeleccionada=" + idAplicacionSeleccionada + "&idObjetoPadre=" + idObjetoPadre,false);
            }
            catch (Exception ex)
            {
                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_GENERAL]);
                NetLogger.WriteLog(ELogLevel.ERROR, ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        protected void btnlimpiar_Click(object sender, EventArgs e)
        {
            try
            {
                txtCodigoObjeto.Text = String.Empty;
                ddlAplicativo.SelectedValue = Constantes.ID_DDL_DEFAULT;
                tvObjetos.Nodes.Clear();
            }
            catch (Exception ex)
            {
                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_GENERAL]);
                NetLogger.WriteLog(ELogLevel.ERROR, ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        private void CargarDatosControles()
        {
            BLAplicacion blAplicacion = new BLAplicacion();
            Formularios.CargarDropDownList(ddlAplicativo,
                                           blAplicacion.ListarAplicacion(),
                                           Constantes.TEXTO_DDL_APLICATIVO,
                                           Constantes.VALUE_DDL_APLICATIVO,
                                           Constantes.DEFAULT_DDL_APLICATIVO);
            btnEditar.Visible = true;
            btnEliminar.Visible = true;
            tvObjetos.Visible = true;
            btnEditar.Attributes.Add("onclick", "return verificarNodoSeleccionado(" + tvObjetos.ClientID + "_Data, '" + tvObjetos.ClientID + "');");
            btnEliminar.Attributes.Add("onclick", "return confirmarEliminacionObjeto(" + tvObjetos.ClientID + "_Data, '" + tvObjetos.ClientID + "');");

        }

        protected void btnEditar_Click(object sender, EventArgs e)
        {
            try
            {
                if (tvObjetos.SelectedNode != null)
                {
                    if (tvObjetos.SelectedNode.Parent != null)
                    {
                        if (tvObjetos.SelectedValue != String.Empty)
                        {
                            int idObjeto = Convert.ToInt32(tvObjetos.SelectedValue);
                            Session.Remove(Constantes.SESION_OBJETO);

                            String urlDetalleObjeto = Convert.ToString(WebConfigurationManager.AppSettings[Constantes.DIRECCION_FRM_OBJETO_DETALLE_MODIFICAR]) + "&" + ID_OBJETO + "=" + idObjeto;
                            Response.Redirect(urlDetalleObjeto,false);
                        }
                        else
                        {
                            MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_OBJETO_DEBE_SELECCIONAR_UN_OBJETO]);
                        }
                    }
                    else
                    {
                        MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_OBJETO_DEBE_SELECCIONAR_UN_OBJETO]);
                    }
                }
                else
                {
                    MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_OBJETO_DEBE_SELECCIONAR_UN_OBJETO]);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_GENERAL]);
                NetLogger.WriteLog(ELogLevel.ERROR, ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        protected void btnEliminar_Click(object sender, EventArgs e)
        {
            try
            {
                if (tvObjetos.SelectedNode != null)
                {
                    if (tvObjetos.SelectedNode.Parent != null)
                    {
                        if (tvObjetos.SelectedValue != String.Empty)
                        {
                            int idObjeto = Convert.ToInt32(tvObjetos.SelectedValue);
                            BLObjeto blObjeto = new BLObjeto();
                            int codigoError = 0;
                            blObjeto.EliminarObjeto(idObjeto, ref codigoError);
                            if (codigoError == 0)
                            {
                                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_OBJETO_ELIMINADO_EXITOSAMENTE]);
                                CargarTreeView();
                            }
                            else
                            {
                                if (codigoError == -1)//Objeto tiene hijos
                                {
                                    MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_OBJETO_NO_SE_PUEDE_ELIMINAR_TIENE_HIJOS]);
                                }
                                else//objeto tiene permisos asignados
                                {
                                    MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_OBJETO_NO_SE_PUEDE_ELIMINAR_USUARIO_EXISTEN_PERMISOS_OBJETO]);
                                }
                            }
                        }
                        else
                        {
                            MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_OBJETO_DEBE_SELECCIONAR_UN_OBJETO]);
                        }
                    }
                    else
                    {
                        MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_OBJETO_DEBE_SELECCIONAR_UN_OBJETO]);
                    }
                }
                else
                {
                    MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_OBJETO_DEBE_SELECCIONAR_UN_OBJETO]);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(WebConfigurationManager.AppSettings[Constantes.MSG_ERROR_GENERAL]);
                NetLogger.WriteLog(ELogLevel.ERROR, ex.Message + Environment.NewLine + ex.StackTrace);
            }
        }

        private string ObtenerIconoNodo(BEObjeto objeto)
        {
            string urlImagen = "";

            switch (objeto.TipoObjeto.IdTipoObjeto)
            {
                case Constantes.CODIGO_TIPO_OBJETO_BOTON://boton
                    urlImagen = WebConfigurationManager.AppSettings[Constantes.RECURSO_RUTA_BOTON];
                    break;
                case Constantes.CODIGO_TIPO_OBJETO_CAJA_TEXTO://textbox
                    urlImagen = WebConfigurationManager.AppSettings[Constantes.RECURSO_RUTA_TEXTBOX];
                    break;
                case Constantes.CODIGO_TIPO_OBJETO_CHECK_BOX://checkbox
                    urlImagen = WebConfigurationManager.AppSettings[Constantes.RECURSO_RUTA_CHECKBOX];
                    break;
                case Constantes.CODIGO_TIPO_OBJETO_FORMULARIO://formulario
                    urlImagen = WebConfigurationManager.AppSettings[Constantes.RECURSO_RUTA_FORMULARIO];
                    break;
                case Constantes.CODIGO_TIPO_OBJETO_LISTA_DESPLEGABLE://dropdownlist
                    urlImagen = WebConfigurationManager.AppSettings[Constantes.RECURSO_RUTA_COMBO];
                    break;
                case Constantes.CODIGO_TIPO_OBJETO_OPCION_MENU://menu
                    urlImagen = WebConfigurationManager.AppSettings[Constantes.RECURSO_RUTA_MENU];
                    break;
                case Constantes.CODIGO_TIPO_OBJETO_RADIO://radio
                    urlImagen = WebConfigurationManager.AppSettings[Constantes.RECURSO_RUTA_RADIO];
                    break;
            }

            return urlImagen;
        }
        /*
        protected void tvObjetos_SelectedNodeChanged(object sender, EventArgs e)
        {
            
            
        }
        //private void PopulateRootLevel()
        //{
        //    SqlConnection objConn = new SqlConnection(ConfigurationManager.ConnectionStrings["JLTSeguridad"].ToString());
        //    SqlCommand objCommand = new SqlCommand("select idObjeto,NombrefisicoObjeto,EtiquetaObjeto,(select count(*) FROM Objeto WHERE IdObjetopadre=sc.idobjeto) childnodecount FROM objeto sc where idObjetoPadre IS NULL", objConn);

        //    SqlDataAdapter da = new SqlDataAdapter(objCommand);
        //    DataTable dt = new DataTable();
        //    da.Fill(dt);
        //    //TextBox1.Text = Convert.ToString(dt.Rows.Count);

        //    PopulateNodes(dt, tvObjetos.Nodes);
            
        //}
        private void PopulateRootLevel()
        {
            SqlConnection objConn = new SqlConnection(ConfigurationManager.ConnectionStrings["JLTSeguridad"].ToString());
            //SqlCommand objCommand = new SqlCommand("select idObjeto,NombrefisicoObjeto,EtiquetaObjeto,(select count(*) FROM Objeto WHERE IdObjetopadre=sc.idobjeto) childnodecount FROM objeto sc where idObjetoPadre IS NULL", objConn);
            SqlCommand objCommand = new SqlCommand("listarpadres_treeview", objConn);
            objCommand.CommandType = CommandType.StoredProcedure;
            objCommand.Parameters.AddWithValue("@etiquetaobjeto", Convert.ToString(txtCodigoObjeto.Text));
            objCommand.Parameters.AddWithValue("@idaplicacion", Convert.ToInt32(ddlAplicativo.SelectedValue));
            SqlDataAdapter da = new SqlDataAdapter(objCommand);
            DataTable dt = new DataTable();
            da.Fill(dt);
            //TextBox1.Text = Convert.ToString(dt.Rows.Count);
            PopulateNodes(dt, tvObjetos.Nodes);
        }


        private void PopulateNodes(DataTable dt, TreeNodeCollection nodes)
        {
            foreach (DataRow dr in dt.Rows)
            {
                TreeNode tn = new TreeNode();
                tn.Text = dr["EtiquetaObjeto"].ToString();
                tn.Value = dr["idObjeto"].ToString();
                nodes.Add(tn);
                tn.PopulateOnDemand = (Convert.ToInt32(dr["childnodecount"]) > 0);
            }
        }
        //private void PopulateSubLevel(int parentid, TreeNode parentNode)
        //{
        //    SqlConnection objConn = new SqlConnection(ConfigurationManager.ConnectionStrings["JLTSeguridad"].ConnectionString);
        //    SqlCommand objCommand = new SqlCommand("select idObjeto,NombreFisicoObjeto,EtiquetaObjeto,(select count(*) FROM Objeto WHERE IdObjetoPadre=sc.idObjeto) childnodecount FROM Objeto sc where IdObjetoPadre=@IdObjetoPadre", objConn);
        //    objCommand.Parameters.Add("@IdObjetoPadre", SqlDbType.Int).Value = parentid;

        //    SqlDataAdapter da = new SqlDataAdapter(objCommand);
        //    DataTable dt = new DataTable();
        //    da.Fill(dt);
        //    PopulateNodes(dt, parentNode.ChildNodes);
        //}
        private void PopulateSubLevel(int parentid, TreeNode parentNode)
        {
            SqlConnection objConn = new SqlConnection(ConfigurationManager.ConnectionStrings["JLTSeguridad"].ConnectionString);
            SqlCommand objCommand = new SqlCommand("listarhijo", objConn);
            objCommand.CommandType = CommandType.StoredProcedure;
            objCommand.Parameters.Add("@IdObjetoPadre", SqlDbType.Int).Value = parentid;
            objCommand.Parameters.AddWithValue("@etiquetaobjeto", Convert.ToString(txtCodigoObjeto.Text));
            objCommand.Parameters.AddWithValue("@idaplicacion", Convert.ToInt32(ddlAplicativo.SelectedValue));
            SqlDataAdapter da = new SqlDataAdapter(objCommand);
            DataTable dt = new DataTable();
            da.Fill(dt);
            PopulateNodes(dt, parentNode.ChildNodes);
        }
        
        protected void tvObjetos_TreeNodePopulate(object sender, TreeNodeEventArgs e)
        {
            PopulateSubLevel(Convert.ToInt32(e.Node.Value), e.Node);
        }
        protected void tvObjetos_SelectedNodeChanged1(object sender, EventArgs e)
        {
            //TextBox1.Text = tvObjetos.SelectedValue;
            Session["editar"] = tvObjetos.SelectedValue;
       }
        */

        override protected void OnInit(EventArgs e)
        {
            this.Load += new System.EventHandler(this.Page_Load);
        }
    }
}
